#!/usr/bin/env python

Import('env')
Import('env_modules')

env_luajit = env_modules.Clone()

if env["platform"] == "windows" or env["platform"] == "uwp":
    env_luajit.Append(CFLAGS=['\O0', '\std=c99'])
else:
    env_luajit.Append(CFLAGS=['-O0', '-std=c99'])

minilua= Program("src/host/minilua.c")

DASM_DIR = "dynasm"
cpu_bits = env["bits"]
HOST_LUA = ""
TARGET_LJARCH = "??"
if env["platform"] == "windows" or env["platform"] == "uwp":
	HOST_LUA = "src/host/minilua.exe"
else:
	HOST_LUA = "src/host/minilua"

DASM = HOST_LUA +" " +DASM_DIR + "/dynasm.lua "

if cpu_bits == '32':
	TARGET_LJARCH = "x86"
else:
	TARGET_LJARCH = "x64"


if env["platform"] == "android":
	if ("android_arch" in env and env["android_arch"] in ["armv6", "armv7"]):
		TARGET_LJARCH = "arm"
	elif ("android_arch" in env and env["android_arch"] == "arm64v8"):
		TARGET_LJARCH = "arm64"#    TARGET_ARCH= -D__AARCH64EB__=1
elif env["platform"] == "iphone":
	if ("arch" in env and env["arch"] == "arm"):
		TARGET_LJARCH = "arm"
	elif ("arch" in env and env["arch"] == "arm64"):
		TARGET_LJARCH = "arm64"#    TARGET_ARCH= -D__AARCH64EB__=1

DASM_DASC = "vm_"+TARGET_LJARCH+".dasc"

lua_include_path = "#modules/luascript/lib/luajit/src"


#
ljlib_c = [
	"src/lib_base.c",
	"src/lib_math.c",
	"src/lib_bit.c",
	"src/lib_string.c",
	"src/lib_table.c",
	"src/lib_io.c",
	"src/lib_os.c",
	"src/lib_package.c",
	"src/lib_debug.c",
	"src/lib_jit.c",
	"src/lib_ffi.c"
]
##do dynasm

dynasm_bld = Builder(action='modules\luascript\lib\luajit\src\host\minilua.exe modules\luascript\lib\luajit\dynasm\dynasm.lua -o $TARGET $SOURCE')
ljvm_bout = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m peobj -o $TARGET $SOURCES')
lj_bcdef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m bcdef -o $TARGET $SOURCES')
lj_ffdef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m ffdef -o $TARGET $SOURCES')
lj_libdef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m libdef -o $TARGET $SOURCES')
lj_recdef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m recdef -o $TARGET $SOURCES')
lib_vmdef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m vmdef -o $TARGET $SOURCE')
lj_folddef = Builder(action='modules\luascript\lib\luajit\src\host\\buildvm.exe -m folddef -o $TARGET $SOURCES')

env_dynasm = Environment(BUILDERS={'Dynasm':dynasm_bld,"LJVM_BOUT":ljvm_bout,"LJ_BCDEF":lj_bcdef,"LJ_FFDEF":lj_ffdef,"LJ_LIBDEF":lj_libdef,"LJ_RECDEF":lj_recdef,"LIB_VMDEF":lib_vmdef,"LJ_FOLDDEF":lj_folddef})
dynasm = env_dynasm.Dynasm('src/buildvm_arch.h', 'src/vm_x86.dasc')
Depends(dynasm,minilua)

##buildvm build
env_builvm = Environment(CPPPATH=[lua_include_path])
buildvm = env_builvm.Program('src/host/buildvm',[
	"src/host/buildvm.c",
	"src/host/buildvm_asm.c",
	"src/host/buildvm_peobj.c",
	"src/host/buildvm_lib.c",
	"src/host/buildvm_fold.c",
])
Depends(buildvm,dynasm)

ljvm_bout = env_dynasm.LJVM_BOUT('src/lj_vm.o',ljlib_c)
lj_bcdef_bout = env_dynasm.LJ_BCDEF('src/lj_bcdef.h',ljlib_c)
lj_ffdef_bout = env_dynasm.LJ_FFDEF('src/lj_ffdef.h',ljlib_c)
lj_libdef_bout = env_dynasm.LJ_LIBDEF('src/lj_libdef.h',ljlib_c)
lj_recdef_bout = env_dynasm.LJ_RECDEF('src/lj_recdef.h',ljlib_c)
# vmdef_bout = env_dynasm.LIB_VMDEF('src/jit/vmdef.lua',ljlib_c)
# lj_folddef_bout = env_dynasm.LJ_FOLDDEF('src/lj_folddef.h',ljlib_c)

Depends(ljvm_bout,buildvm)
Depends(lj_bcdef_bout,buildvm)
Depends(lj_ffdef_bout,lj_bcdef_bout)
Depends(lj_libdef_bout,lj_ffdef_bout)
Depends(lj_recdef_bout,lj_libdef_bout)
# Depends(vmdef_bout,lj_recdef_bout)
# Depends(lj_folddef_bout,vmdef_bout)


##do header
##buildvm build 

# luajit_sources = [
# 	"src/lib_aux.c",
# 	"src/lib_base.c",
# 	"src/lib_bit.c",
# 	"src/lib_debug.c",
# 	"src/lib_ffi.c",
# 	"src/lib_init.c",
# 	"src/lib_io.c",
# 	"src/lib_jit.c",
# 	"src/lib_math.c",
# 	"src/lib_os.c",
# 	"src/lib_package.c",
# 	"src/lib_string.c",
# 	"src/lib_table.c",
# 	"src/lj_alloc.c",
# 	"src/lj_api.c",
# 	"src/lj_asm.c",
# 	"src/lj_bc.c",
# 	"src/lj_bcread.c",
# 	"src/lj_bcwrite.c",
# 	"src/lj_buf.c",
# 	"src/lj_carith.c",
# 	"src/lj_ccall.c",
# 	"src/lj_ccallback.c",
# 	"src/lj_cconv.c",
# 	"src/lj_cdata.c",
# 	"src/lj_char.c",
# 	"src/lj_clib.c",
# 	"src/lj_cparse.c",
# 	"src/lj_crecord.c",
# 	"src/lj_ctype.c",
# 	"src/lj_debug.c",
# 	"src/lj_dispatch.c",
# 	"src/lj_err.c",
# 	"src/lj_ffrecord.c",
# 	"src/lj_func.c",
# 	"src/lj_gc.c",
# 	"src/lj_gdbjit.c",
# 	"src/lj_ir.c",
# 	"src/lj_lex.c",
# 	"src/lj_lib.c",
# 	"src/lj_load.c",
# 	"src/lj_mcode.c",
# 	"src/lj_meta.c",
# 	"src/lj_obj.c",
# 	"src/lj_opt_dce.c",
# 	"src/lj_opt_fold.c",
# 	"src/lj_opt_loop.c",
# 	"src/lj_opt_mem.c",
# 	"src/lj_opt_narrow.c",
# 	"src/lj_opt_sink.c",
# 	"src/lj_opt_split.c",
# 	"src/lj_parse.c",
# 	"src/lj_profile.c",
# 	"src/lj_record.c",
# 	"src/lj_snap.c",
# 	"src/lj_state.c",
# 	"src/lj_str.c",
# 	"src/lj_strfmt.c",
# 	"src/lj_strfmt_num.c",
# 	"src/lj_strscan.c",
# 	"src/lj_tab.c",
# 	"src/lj_trace.c",
# 	"src/lj_udata.c",
# 	"src/lj_vmevent.c",
# 	"src/lj_vmmath.c",
# 	"src/ljamalg.c",
# 	"src/luajit.c",
# 	]
# env_luajit.add_source_files(env.modules_sources, luajit_sources)
